# generate "user" model using devise
#-----------------------------------
rails generate devise user
rake db:migrate

# have local devise views so you can customize, otherwise the default views will be used
#---------------------------------------------------------------------------------------
rails generate devise:views

# handle devise messages with bootstrap
#--------------------------------------
https://github.com/plataformatec/devise/wiki/How-To:-Integrate-I18n-Flash-Messages-with-Devise-and-Bootstrap

# add login helper method support in the rails_helper.rb
#-------------------------------------------------------
include Warden::Test::Helpers
Warden.test_mode!

# strong parameters in rails 4
#-----------------------------
http://edgeapi.rubyonrails.org/classes/ActionController/StrongParameters.html

# create settings object
#-----------------------
1. create new feature spec file and write basic spec, add to the git repository
2. update the application.html.erb inserting net new menu item (or separate it out in a separate settings menu .html file and render it in)
3. this menu change will brake other tests as well! don't worry, we'll fix it.
4. add the :settings_<object> to the resources in the routes.rb file
5. generate controller
6. generate model + do migrations
7. create specific views in app/views folder
8. make an index.html.erb and new.html.erb file
9. remove all automatically generated stuff that is not imediately used (like empty controller specs, javascript, stylesheets, views, ...)

# create model with association to other model (machinetype belongs to a machinegroup)
#-------------------------------------------------------------------------------------
1. generate the model: > rails g model machinetype name:string machinegroup:references
2. run the db migration: > rake db:migrate

# pending scenario's
#-------------------
use <skip 'scenario description' do end> block
or <scenario 'scenario description', :skip => 'reason for skipping' do end> block